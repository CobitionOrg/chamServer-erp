generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id          Int          @id @default(autoincrement())
  userId      String       @unique
  userPw      String
  grade       Role         @default(user)
  name        String
  useFlag     Boolean      @default(false)
  attendances attendance[]
}

model attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  startTime DateTime
  endTime   DateTime
  userId    Int
  tardy     Boolean  @default(false)
  user      user     @relation(fields: [userId], references: [id])

  @@index([userId], map: "attendance_userId_fkey")
}

model question {
  id           Int           @id @default(autoincrement())
  question     String        @db.VarChar(500)
  type         Visit
  choice       Choice?
  note         String?       @db.VarChar(200)
  questionCode String?       @db.VarChar(45)
  useFlag      Int?          @default(0) @db.TinyInt
  orderType    String?       @db.VarChar(45)
  answers      answer[]
  questionImgs questionImg[]
}

model answer {
  id         Int      @id @default(autoincrement())
  answer     String
  questionId Int
  question   question @relation(fields: [questionId], references: [id])

  @@index([questionId], map: "answer_questionId_fkey")
}

model questionImg {
  id         Int      @id @default(autoincrement())
  imgUrl     String
  useFlag    Boolean
  questionId Int
  question   question @relation(fields: [questionId], references: [id])

  @@index([questionId], map: "questionImg_questionId_fkey")
}

model patient {
  id        Int     @id @default(autoincrement())
  name      String
  phoneNum  String
  addr      String
  socialNum Int
  orders    order[]
}

model item {
  id      Int     @id @default(autoincrement())
  item    String
  isFirst Boolean
  isYoyo  Boolean
}

model order {
  id              Int            @id @default(autoincrement())
  route           String         //알게 된 경로
  message         String         //상담 및 배송 요청 메세지
  cachReceipt     String         //현금 영수증
  typeCheck       String         //비대면진료 타입 해당사항 체크
  consultingTime  String         //상담가능시간   
  payType         String         //결제 진행 방법   
  essentialCheck  String         //필수 체크
  outage          String         //감량 된 킬로수
  consultingType  Boolean        @default(false)  //유선 상담 유무 -> true면 유선
  phoneConsulting Boolean        @default(false)  //유선 상담 완료 플래그
  isComplete      Boolean        @default(false)  //결제 완료 유무 -> 완료 시 발송목록으로
  patientId       Int
  isFirst Boolean @default(true) //초진/재진 유무
  patient         patient        @relation(fields: [patientId], references: [id])
  orderBodyType   orderBodyType?
  orderItems      orderItem[]

  @@index([patientId], map: "order_patientId_fkey")
}

model orderBodyType {
  id           Int    @id @default(autoincrement())
  tallWeight   String //키 몸무게
  digestion    String //소화 상태
  sleep        String //수면 상태
  constipation String //변비 상태
  nowDrug      String //현재 복용 중인 약
  pastDrug     String //과거 다이어트 약 복용
  pastSurgery  String //과거에 수술하신 경우
  orderId      Int    @unique
  order        order  @relation(fields: [orderId], references: [id])
}

model orderItem {
  id      Int      @id @default(autoincrement())
  item    String
  type    ItemType
  orderId Int
  order   order    @relation(fields: [orderId], references: [id])

  @@index([orderId], map: "orderItem_orderId_fkey")
}

enum Role {
  user //일반 간호사
  admin //관리자
  boss //원장
}

enum Visit {
  first //초진  
  return //재진
}

enum Choice {
  multiple //다수 선택
  subjective //서술식
  single //하나만 선택
}

enum ItemType {
  common 
  yoyo //요요
  assistant //보조
}
