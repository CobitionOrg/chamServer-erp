generator client {
  provider = "prisma-client-js"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "한의원"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  /// index key
  id          Int          @id @default(autoincrement())
  /// 유저 아이디
  userId      String       @unique
  /// 유저 비밀번호
  userPw      String
  /// 유저 등급
  grade       Role         @default(user)
  /// 유저 이름
  name        String
  /// 사용 여부
  useFlag     Boolean      @default(false)
  attendances attendance[]
  logs        log[]
}

model log {
  /// index key
  id       Int      @id @default(autoincrement())
  /// 로그
  log      String
  /// 시간
  DateTime DateTime
  /// 과정
  stage    String
  /// 유저 key
  userId   Int
  user     user     @relation(fields: [userId], references: [id])

  @@index([userId], map: "log_userId_fkey")
}

model attendance {
  /// index key
  id        Int      @id @default(autoincrement())
  /// 출근 날짜
  date      DateTime
  /// 출근 시간
  startTime DateTime
  /// 퇴근 시간
  endTime   DateTime
  /// 유저 key
  userId    Int
  /// 지각 여부
  tardy     Boolean  @default(false)
  user      user     @relation(fields: [userId], references: [id])

  @@index([userId], map: "attendance_userId_fkey")
}

model question {
  /// index key
  id           Int           @id @default(autoincrement())
  /// 질문 내용
  question     String        @db.VarChar(500)
  /// 초진 or 재진 타입 
  type         Visit
  /// 선택형 or 서술형 or 멀티 선택형 
  choice       Choice?
  /// 비고
  note         String?       @db.VarChar(200)
  /// 어떤 질문인지 코드 값(order table에 매칭)
  questionCode String?       @db.VarChar(45)
  /// 사용여부
  useFlag      Int?          @default(0) @db.TinyInt
  /// 어떤 질문인지 타입 (주문관련, 주문 아이템, 환자 정보 등)
  orderType    String?       @db.VarChar(45)
  answers      answer[]
  questionImgs questionImg[]
}

model answer {
  /// index key
  id         Int      @id @default(autoincrement())
  /// 선택지
  answer     String
  /// question key 값
  questionId Int
  question   question @relation(fields: [questionId], references: [id])

  @@index([questionId], map: "answer_questionId_fkey")
}

model questionImg {
  /// index key
  id         Int      @id @default(autoincrement())
  /// 이미지 url 값
  imgUrl     String
  /// 사용 여부 flag
  useFlag    Boolean
  /// question key 값
  questionId Int
  question   question @relation(fields: [questionId], references: [id])

  @@index([questionId], map: "questionImg_questionId_fkey")
}

model patient {
  /// index key
  id         Int         @id @default(autoincrement())
  /// 환자 이름
  name       String
  /// 환자 핸드폰 번호
  phoneNum   String
  /// 환자 주소
  addr       String?     @db.Text
  /// 환자 주민번호
  socialNum  String
  useFlag    Boolean?    @default(true)
  orders     order[]
  tempOrders tempOrder[]
}

model item {
  /// index key
  id         Int     @id @default(autoincrement())
  /// 아이템 정보
  item       String
  /// 초진 or 재진 여부
  isFirst    Boolean
  /// 요요 여부
  isYoyo     Boolean
  /// 설문 관련 정보 여부
  isQuestion Boolean
  /// 가격(택배비 제외)
  price      Int?
  isCommon   Boolean @default(false)
}

model order {
  /// index key
  id              Int            @id @default(autoincrement())
  /// 알게 된 경로 
  route           String
  /// 배송 요청 메세지
  message         String
  /// 현금 영수증
  cachReceipt     String
  /// 비대면 진료 타입 해당사항 체크
  typeCheck       String
  /// 상담가능시간
  consultingTime  String
  /// 결제 진행 방법
  payType         String
  /// 필수 체크
  essentialCheck  String
  /// 감량 된 킬로수
  outage          String
  /// 유선 상담 유무 -> true면 유선
  consultingType  Boolean        @default(false)
  /// 유선 상담 완료 플래그
  phoneConsulting Boolean        @default(false)
  /// 결제 완료 유무 -> 완료 시 발송목록으로
  isComplete      Boolean        @default(false)
  /// 환자 key 
  patientId       Int
  /// 초진 재진 유무
  isFirst         Boolean        @default(true)
  /// 접수 일자
  date            DateTime       @db.DateTime(0)
  /// 정렬 번호
  orderSortNum    Int            @default(0)
  /// 송장 번호
  sendNum         String?        @db.VarChar(100)
  /// 오더에 주문된 제품 총 가격
  price           Int?           @default(0)
  /// 특이 사항
  remark          String?
  /// 방문 수령 여부 true: 방문 수령, false: 택배 배송
  isPickup        Boolean?       @default(false)
  /// 합배송 번호
  combineNum      Int?           @default(0)
  /// 해당 오더에 카드로 결제된 금액
  card            Int?           @default(0)
  /// 해당 오더에 계좌 이체 된 금액
  cash            Int?           @default(0)
  ///
  note            String?
  /// 접수 알림톡 발송 여부
  talkFlag        Boolean?       @default(false)
  /// 상담 연결 여부
  consultingFlag  Boolean?       @default(false)
  /// 주문 주소
  addr            String?        @db.Text
  /// 결제 확인 플래그(0 미결제 1 결제 2 결제 요청)
  payFlag         Int?           @default(0)
  useFlag         Boolean?       @default(true)
  patient         patient        @relation(fields: [patientId], references: [id])
  orderBodyType   orderBodyType?
  orderItems      orderItem[]
  tempOrders      tempOrder[]

  @@index([patientId], map: "order_patientId_fkey")
}

model tempOrder {
  /// index key
  id               Int               @id @default(autoincrement())
  /// 알게 된 경로 
  route            String
  /// 배송 요청 메세지
  message          String
  /// 현금 영수증
  cachReceipt      String
  /// 비대면 진료 타입 해당사항 체크
  typeCheck        String
  /// 상담가능시간
  consultingTime   String
  /// 결제 진행 방법
  payType          String
  /// 필수 체크
  essentialCheck   String
  /// 감량 된 킬로수
  outage           String
  /// 유선 상담 유무 -> true면 유선
  consultingType   Boolean           @default(false)
  /// 유선 상담 완료 플래그
  phoneConsulting  Boolean           @default(false)
  /// 결제 완료 유무 -> 완료 시 발송목록으로
  isComplete       Boolean           @default(false)
  /// 환자 key
  patientId        Int
  /// 초진 재진 유무
  isFirst          Boolean           @default(true)
  /// 접수 일자
  date             DateTime          @db.DateTime(0)
  /// 정렬 번호
  orderSortNum     Int               @default(0)
  /// 원 오더 key
  orderId          Int
  /// 송장 번호
  sendNum          String?           @db.VarChar(100)
  /// 발송목록 key
  sendListId       Int
  /// 해당 오더 발송 주소
  addr             String?           @db.Text
  /// 접수대에서 수정여부 체크 확인 플래그
  updateInfoCheck  Boolean?          @default(true)
  /// 주문 취소 플래그
  cancelFlag       Boolean?
  addSend          addSend?
  orderUpdateInfos orderUpdateInfo[]
  order            order             @relation(fields: [orderId], references: [id])
  patient          patient           @relation(fields: [patientId], references: [id])
  sendList         sendList          @relation(fields: [sendListId], references: [id])
  tempOrderItems   tempOrderItem?

  @@index([orderId], map: "tempOrder_orderId_fkey")
  @@index([patientId], map: "tempOrder_patientId_fkey")
  @@index([sendListId], map: "tempOrder_sendListId_fkey")
}

model tempOrderItem {
  /// index key
  id          Int       @id @default(autoincrement())
  /// 주문한 아이템
  item        String
  /// 해당 temp order key
  tempOrderId Int       @unique
  /// 택배비 유무
  sendTax     Boolean?  @default(false)
  tempOrder   tempOrder @relation(fields: [tempOrderId], references: [id])
}

model sendList {
  /// index key
  id         Int         @id @default(autoincrement())
  /// 발송목록 타이틀(발송되는 날짜)
  title      String
  /// 발송 총량
  amount     Int
  /// 만들어진 날짜
  date       DateTime    @db.DateTime(0)
  /// 기준 총량을 채웠는지 여부(최대 350개)
  full       Boolean     @default(false)
  /// 사용 여부
  useFlag    Boolean     @default(true)
  /// 고정 여부
  fixFlag    Boolean     @default(false)
  /// 비고 - 안씀
  note       String?
  addSends   addSend[]
  tempOrders tempOrder[]
}

model addSend {
  /// index key
  id          Int       @id @default(autoincrement())
  /// 다른 날로 발송 추가 되는 오더
  tempOrderId Int       @unique
  /// 해당 sendList 키
  sendListId  Int
  sendList    sendList  @relation(fields: [sendListId], references: [id])
  tempOrder   tempOrder @relation(fields: [tempOrderId], references: [id])

  @@index([sendListId], map: "addSend_sendListId_fkey")
}

model orderBodyType {
  /// index key
  id           Int      @id @default(autoincrement())
  /// 키 몸무게
  tallWeight   String
  /// 소화 상태
  digestion    String
  /// 수면 상태
  sleep        String
  /// 변비 상태
  constipation String
  /// 현재 복용 중인 약
  nowDrug      String
  /// 과거 다이어트 약 복용
  pastDrug     String
  /// 과거에 수술하신 경우
  pastSurgery  String
  /// 해당 주문 오더 key
  orderId      Int      @unique
  useFlag      Boolean? @default(true)
  order        order    @relation(fields: [orderId], references: [id])
}

model orderItem {
  /// index key
  id      Int      @id @default(autoincrement())
  /// 주문한 아이템
  item    String
  /// 아이템 타입
  type    ItemType
  /// 해당 주문 오더 key
  orderId Int
  useFlag Boolean? @default(true)
  order   order    @relation(fields: [orderId], references: [id])

  @@index([orderId], map: "orderItem_orderId_fkey")
}

model orderUpdateInfo {
  /// index key
  id           Int        @id @default(autoincrement())
  /// 업데이트 정보
  info         String     @db.VarChar(45)
  /// 업데이트 정보 아이디
  updateInfoId Int
  /// temp order key
  tempOrderId  Int
  tempOrder    tempOrder  @relation(fields: [tempOrderId], references: [id])
  updateInfo   updateInfo @relation(fields: [updateInfoId], references: [id])

  @@index([tempOrderId], map: "orderUpdateInfo_tempOrderId_fkey")
  @@index([updateInfoId], map: "orderUpdateInfo_updateInfoId_fkey")
}

model updateInfo {
  /// index key
  id               Int               @id @default(autoincrement())
  /// 업데이트 정보
  info             String            @db.VarChar(45)
  orderUpdateInfos orderUpdateInfo[]
}

model urlData {
  /// index key
  id         Int    @id @default(autoincrement())
  /// url
  url        String
  /// object 이름
  objectName String
}

enum Role {
  user
  admin
  boss
}

enum Visit {
  first
  return
}

enum Choice {
  multiple
  subjective
  single
}

enum ItemType {
  common
  yoyo
  assistant
}
