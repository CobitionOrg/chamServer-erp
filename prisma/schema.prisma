generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id          Int          @id @default(autoincrement())
  userId      String       @unique
  userPw      String
  grade       Role         @default(user)
  name        String
  useFlag     Boolean      @default(false)
  attendances attendance[]
}

model attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  startTime DateTime
  endTime   DateTime
  userId    Int
  tardy     Boolean  @default(false)
  user      user     @relation(fields: [userId], references: [id])

  @@index([userId], map: "attendance_userId_fkey")
}

model question {
  id           Int           @id @default(autoincrement())
  question     String        @db.VarChar(500)
  type         Visit
  choice       Choice?
  note         String?       @db.VarChar(200)
  questionCode String?       @db.VarChar(45)
  useFlag      Int?          @default(0) @db.TinyInt
  orderType    String?       @db.VarChar(45)
  answers      answer[]
  questionImgs questionImg[]
}

model answer {
  id         Int      @id @default(autoincrement())
  answer     String
  questionId Int
  question   question @relation(fields: [questionId], references: [id])

  @@index([questionId], map: "answer_questionId_fkey")
}

model questionImg {
  id         Int      @id @default(autoincrement())
  imgUrl     String
  useFlag    Boolean
  questionId Int
  question   question @relation(fields: [questionId], references: [id])

  @@index([questionId], map: "questionImg_questionId_fkey")
}

model patient {
  id         Int         @id @default(autoincrement())
  name       String
  phoneNum   String
  addr       String
  socialNum  String
  orders     order[]
  tempOrders tempOrder[]
}

model item {
  id         Int     @id @default(autoincrement())
  item       String
  isFirst    Boolean
  isYoyo     Boolean
  isQuestion Boolean
  price      Int?
}

model order {
  id              Int            @id @default(autoincrement())
  route           String
  message         String
  cachReceipt     String
  typeCheck       String
  consultingTime  String
  payType         String
  essentialCheck  String
  outage          String
  consultingType  Boolean        @default(false)
  phoneConsulting Boolean        @default(false)
  isComplete      Boolean        @default(false)
  patientId       Int
  isFirst         Boolean        @default(true)
  date            DateTime       @db.DateTime(0)
  orderSortNum    Int            @default(0)
  sendNum         String?        @db.VarChar(100)
  price           Int?           @default(0)
  remark          String?
  isPickup        Boolean?       @default(false)
  patient         patient        @relation(fields: [patientId], references: [id])
  orderBodyType   orderBodyType?
  orderItems      orderItem[]
  tempOrders      tempOrder[]

  @@index([patientId], map: "order_patientId_fkey")
}

model tempOrder {
  id              Int      @id @default(autoincrement())
  route           String
  message         String
  cachReceipt     String
  typeCheck       String
  consultingTime  String
  payType         String
  essentialCheck  String
  outage          String
  consultingType  Boolean  @default(false)
  phoneConsulting Boolean  @default(false)
  isComplete      Boolean  @default(false)
  patientId       Int
  isFirst         Boolean  @default(true)
  date            DateTime @db.DateTime(0)
  orderSortNum    Int      @default(0)
  orderId         Int
  sendNum         String?  @db.VarChar(100)
  sendListId      Int
  order           order    @relation(fields: [orderId], references: [id])
  patient         patient  @relation(fields: [patientId], references: [id])
  sendList        sendList @relation(fields: [sendListId], references: [id])

  @@index([orderId], map: "tempOrder_orderId_fkey")
  @@index([patientId], map: "tempOrder_patientId_fkey")
  @@index([sendListId], map: "tempOrder_sendListId_fkey")
}

model sendList {
  id         Int         @id @default(autoincrement())
  title      String
  amount     Int
  date       DateTime    @db.DateTime(0)
  full       Boolean     @default(false)
  useFlag    Boolean     @default(true)
  fixFlag    Boolean     @default(false)
  tempOrders tempOrder[]
}

model orderBodyType {
  id           Int    @id @default(autoincrement())
  tallWeight   String
  digestion    String
  sleep        String
  constipation String
  nowDrug      String
  pastDrug     String
  pastSurgery  String
  orderId      Int    @unique
  order        order  @relation(fields: [orderId], references: [id])
}

model orderItem {
  id      Int      @id @default(autoincrement())
  item    String
  type    ItemType
  orderId Int
  order   order    @relation(fields: [orderId], references: [id])

  @@index([orderId], map: "orderItem_orderId_fkey")
}

enum Role {
  user
  admin
  boss
}

enum Visit {
  first
  return
}

enum Choice {
  multiple
  subjective
  single
}

enum ItemType {
  common
  yoyo
  assistant
}
